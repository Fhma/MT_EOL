
operation ConnectedSegmentsInjectMatch() : Sequence  {
	var matches = new Sequence();
	for(region in TB!Region.all) {
		for(te1 in region.elements) {
			if(te1.isKindOf(TB!Segment)) {
				for(te3 in te1.connectsTo) {
					if(te3.isKindOf(TB!Segment)) {
						for(sensor in te1.monitoredBy) {
							if(not te3.monitoredBy.contains(sensor)) {
								continue;
							}
							matches.add(new Native('ConnectedSegmentsInjectMatch')(sensor, te1, te3));
						}
					}
				}
			}
		}
	}
	return matches;
}
operation InjectConnectedSegments(matches : Sequence)  {
	for(match in matches) {
		var segment2 = new TBI!Segment;
		segment2.length = DEFAULT_SEGMENT_LENGTH;
		match.getSegment1().connectsTo.remove(match.getSegment3());
		match.getSegment1().connectsTo.add(segment2);
		segment2.connectsTo.add(match.getSegment3());
		segment2.monitoredBy.add(match.getSensor());
		var region = match.getSegment1().eContainer();
		region.elements.add(segment2);
	}
}
operation PosLengthInjectMatch() : Sequence  {
	return TB!Segment.all().collect(s|new Native('PosLengthInjectMatch')(s));
}
operation InjectPosLength(matches : Sequence)  {
	for(match in matches) {
		match.getSegment().length = 0;
	}
}
operation RouteSensorInjectMatch() : Sequence  {
	var matches = new Sequence();
	for(route in TB!Route.all()) {
		for(sensor in route.requires) {
			matches.add(new Native('RouteSensorInjectMatch')(route, sensor));
		}
	}
	return matches;
}
operation InjectRouteSensor(matches : Sequence)  {
	for(match in matches) {
		match.getRoute().requires.remove(match.getSensor());
	}
}
operation SemaphoreNeighborInjectMatch() : Sequence  {
	var matches = new Sequence();
	var r2 = r.entry;
	Route.all.select(r|r.entry.isDefined()).forAll(r|matches.add(new Native('SemaphoreNeighborInjectMatch')(r, r2)));
	return matches;
}
operation InjectSemaphoreNeighbor(matches : Sequence)  {
	for(match in matches) {
		var route = match.getRoute();
		var semaphore = match.getSemaphore();
		if(route.entry=semaphore) {
			route.entry = null;
		}
	}
}
operation SwitchMonitoredInjectMatch() : Sequence  {
	return TB!Switch.all.collect(s|new Native('SwitchMonitoredInjectMatch')(s));
}
operation InjectSwitchMonitored(matches : Sequence)  {
	for(match in matches) {
		match.getSw().monitoredBy.clear();
	}
}
operation SwitchSetInjectMatch() : Sequence  {
	return TB!Switch.all.collect(sw|new Native('SwitchSetInjectMatch')(sw));
}
operation InjectSwitchSet(matches : Sequence)  {
	for(match in matches) {
		var currentPosition = match.getSw().currentPosition;
		var posEnum = currentPosition.getEEnum();
		var newCurrentPosition = posEnum.getEEnumLiteral((currentPosition.getValue() + 1).mod(posEnum.getELiterals().size()));
		match.getSw().currentPosition = newCurrentPosition;
	}
}