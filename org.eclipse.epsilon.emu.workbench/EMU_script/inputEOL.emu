// operator: IfStatement_condition_replacement
// desc: manipulates the boolean expression of condition
//
// Inherited operators: Statement
////////////////////////////////////////////////////////////


// 1.0: neglete the state of condtion
// 1.1: neglete all expressions and add not operator
@action replace
@property condition
pattern neglete_all_and_add_NOT
instance:IfStatement
	guard: not instance.condition.isTypeOf(NotOperatorExpression) {
	do {
		var new_op = NotOperatorExpression.createInstance();
		new_op.expression = instance.condition;
		new_op.expression.inBrackets = true;
		instance.condition = new_op;
	}
}

// 1.2: neglete all not expression and remove not operator
@action replace
@property condition
pattern neglete_all_and_remove_NOT
instance:IfStatement 
	guard: instance.condition.isTypeOf(NotOperatorExpression) {
	do {
		instance.condition = instance.condition.expression;
	}
}

// 2.0: replacing of LogicalExpression (and, or, xor, implies)
// 2.1: replacing AndOperatorExpression with others
// 2.1.1: replacing AndOperatorExpression with or
@action replace
@property condition
pattern replacing_and_operator_with_or
instance:IfStatement
	guard: instance.condition.isTypeOf(AndOperatorExpression) {
	do {
		var new_op = OrOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 2.1.2: replacing AndOperatorExpression with xor
@action replace
@property condition
pattern replacing_and_operator_with_xor
instance:IfStatement
	guard: instance.condition.isTypeOf(AndOperatorExpression) {
	do {
		var new_op = XorOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 2.1.3: replacing AndOperatorExpression with implies
@action replace
@property condition
pattern replacing_and_operator_with_implies
instance:IfStatement
	guard: instance.condition.isTypeOf(AndOperatorExpression) {
	do {
		var new_op = ImpliesOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 2.2: replacing OrOperatorExpression with others
// 2.2.1: replacing OrOperatorExpression with and
@action replace
@property condition
pattern replacing_or_operator_with_and
instance:IfStatement
	guard: instance.condition.isTypeOf(OrOperatorExpression) {
	do {
		var new_op = AndOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}
// 2.2.2: replacing OrOperatorExpression with xor
@action replace
@property condition
pattern replacing_or_operator_with_xor
instance:IfStatement
	guard: instance.condition.isTypeOf(OrOperatorExpression) {
	do {
		var new_op = XorOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 2.2.3: replacing OrOperatorExpression with implies
@action replace
@property condition
pattern replacing_or_operator_with_implies
instance:IfStatement
	guard: instance.condition.isTypeOf(OrOperatorExpression) {
	do {
		var new_op = ImpliesOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 2.3: replacing XorOperatorExpression with others
// 2.3.1: replacing XorOperatorExpression with and
@action replace
@property condition
pattern replacing_xor_operator_with_and
instance:IfStatement
	guard: instance.condition.isTypeOf(XorOperatorExpression) {
	do {
		var new_op = AndOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 2.3.2: replacing XorOperatorExpression with or
@action replace
@property condition
pattern replacing_xor_operator_with_or
instance:IfStatement
	guard: instance.condition.isTypeOf(XorOperatorExpression) {
	do {
		var new_op = OrOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 2.3.3: replacing XorOperatorExpression with implies
@action replace
@property condition
pattern replacing_xor_operator_with_implies
instance:IfStatement
	guard: instance.condition.isTypeOf(XorOperatorExpression) {
	do {
		var new_op = ImpliesOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 2.4: replacing ImpliesOperatorExpression with others
// 2.4.1: replacing ImpliesOperatorExpression with and
@action replace
@property condition
pattern replacing_implies_operator_with_and
instance:IfStatement
	guard: instance.condition.isTypeOf(ImpliesOperatorExpression) {
	do {
		var new_op = AndOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 2.4.2: replacing ImpliesOperatorExpression with or
@action replace
@property condition
pattern replacing_implies_operator_with_or
instance:IfStatement
	guard: instance.condition.isTypeOf(ImpliesOperatorExpression) {
	do {
		var new_op = OrOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 2.4.3: replacing ImpliesOperatorExpression with xor
@action replace
@property condition
pattern replacing_implies_operator_with_xor
instance:IfStatement
	guard: instance.condition.isTypeOf(ImpliesOperatorExpression) {
	do {
		var new_op = XorOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.0: replacing of ComparisonOperator (>,>=,<,<=,<>,=)
// 3.1: replacing > with others
// 3.1.1: replacing with >=
@action replace
@property condition
pattern replacing_gt_operator_with_gte
instance:IfStatement
	guard: instance.condition.isTypeOf(GreaterThanOperatorExpression) {
	do {
		var new_op = GreaterThanOrEqualToOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.1.2: replacing with <
@action replace
@property condition
pattern replacing_gt_operator_with_lt
instance:IfStatement
	guard: instance.condition.isTypeOf(GreaterThanOperatorExpression) {
	do {
		var new_op = LessThanOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.1.3: replacing with <=
@action replace
@property condition
pattern replacing_gt_operator_with_lte
instance:IfStatement
	guard: instance.condition.isTypeOf(GreaterThanOperatorExpression) {
	do {
		var new_op = LessThanOrEqualToOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.1.4: replacing with <>
@action replace
@property condition
pattern replacing_gt_operator_with_notequal
instance:IfStatement
	guard: instance.condition.isTypeOf(GreaterThanOperatorExpression) {
	do {
		var new_op = NotEqualsOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.1.5: replacing with =
@action replace
@property condition
pattern replacing_gt_operator_with_equal
instance:IfStatement
	guard: instance.condition.isTypeOf(GreaterThanOperatorExpression) {
	do {
		var new_op = EqualsOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.2: replacing >= with others
// 3.2.1: replacing with >
@action replace
@property condition
pattern replacing_gte_operator_with_gt
instance:IfStatement
	guard: instance.condition.isTypeOf(GreaterThanOrEqualToOperatorExpression) {
	do {
		var new_op = GreaterThanOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.2.2: replacing with <
@action replace
@property condition
pattern replacing_gte_operator_with_lt
instance:IfStatement
	guard: instance.condition.isTypeOf(GreaterThanOrEqualToOperatorExpression) {
	do {
		var new_op = LessThanOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.2.3: replacing with <=
@action replace
@property condition
pattern replacing_gte_operator_with_lte
instance:IfStatement
	guard: instance.condition.isTypeOf(GreaterThanOrEqualToOperatorExpression) {
	do {
		var new_op = LessThanOrEqualToOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.2.4: replacing with <>
@action replace
@property condition
pattern replacing_gte_operator_with_notequal
instance:IfStatement
	guard: instance.condition.isTypeOf(GreaterThanOrEqualToOperatorExpression) {
	do {
		var new_op = NotEqualsOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.2.5: replacing with =
@action replace
@property condition
pattern replacing_gte_operator_with_equal
instance:IfStatement
	guard: instance.condition.isTypeOf(GreaterThanOrEqualToOperatorExpression) {
	do {
		var new_op = EqualsOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.3: replacing < with others
// 3.3.1: replacing with >
@action replace
@property condition
pattern replacing_lt_operator_with_gt
instance:IfStatement
	guard: instance.condition.isTypeOf(LessThanOperatorExpression) {
	do {
		var new_op = GreaterThanOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.3.2: replacing with >=
@action replace
@property condition
pattern replacing_lt_operator_with_gte
instance:IfStatement
	guard: instance.condition.isTypeOf(LessThanOperatorExpression) {
	do {
		var new_op = GreaterThanOrEqualToOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.3.3: replacing with <=
@action replace
@property condition
pattern replacing_lt_operator_with_lte
instance:IfStatement
	guard: instance.condition.isTypeOf(LessThanOperatorExpression) {
	do {
		var new_op = LessThanOrEqualToOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.3.4: replacing with <>
@action replace
@property condition
pattern replacing_lt_operator_with_notequal
instance:IfStatement
	guard: instance.condition.isTypeOf(LessThanOperatorExpression) {
	do {
		var new_op = NotEqualsOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.3.5: replacing with =
@action replace
@property condition
pattern replacing_lt_operator_with_equal
instance:IfStatement
	guard: instance.condition.isTypeOf(LessThanOperatorExpression) {
	do {
		var new_op = EqualsOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.4: replacing <= with others
// 3.4.1: replaciing with >
@action replace
@property condition
pattern replacing_lte_operator_with_gt
instance:IfStatement
	guard: instance.condition.isTypeOf(LessThanOrEqualToOperatorExpression) {
	do {
		var new_op = GreaterThanOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.4.2: replacing with >=
@action replace
@property condition
pattern replacing_lte_operator_with_gte
instance:IfStatement
	guard: instance.condition.isTypeOf(LessThanOrEqualToOperatorExpression) {
	do {
		var new_op = GreaterThanOrEqualToOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.4.3: replacing with <
@action replace
@property condition
pattern replacing_lte_operator_with_lt
instance:IfStatement
	guard: instance.condition.isTypeOf(LessThanOrEqualToOperatorExpression) {
	do {
		var new_op = LessThanOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.4.4: replacing with <>
@action replace
@property condition
pattern replacing_lte_operator_with_notequal
instance:IfStatement
	guard: instance.condition.isTypeOf(LessThanOrEqualToOperatorExpression) {
	do {
		var new_op = NotEqualsOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.4.5: replacing with =
@action replace
@property condition
pattern replacing_lte_operator_with_equal
instance:IfStatement
	guard: instance.condition.isTypeOf(LessThanOrEqualToOperatorExpression) {
	do {
		var new_op = EqualsOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.5: replacing <> with others
// 3.5.1: replacing with >
@action replace
@property condition
pattern replacing_notequal_operator_with_gt
instance:IfStatement
	guard: instance.condition.isTypeOf(NotEqualsOperatorExpression) {
	do {
		var new_op = GreaterThanOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.5.2: replacing with >=
@action replace
@property condition
pattern replacing_notequal_operator_with_gte
instance:IfStatement
	guard: instance.condition.isTypeOf(NotEqualsOperatorExpression) {
	do {
		var new_op = GreaterThanOrEqualToOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.5.3: replacing with <
@action replace
@property condition
pattern replacing_notequal_operator_with_lt
instance:IfStatement
	guard: instance.condition.isTypeOf(NotEqualsOperatorExpression) {
	do {
		var new_op = LessThanOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.5.4: replacing with <=
@action replace
@property condition
pattern replacing_notequal_operator_with_lte
instance:IfStatement
	guard: instance.condition.isTypeOf(NotEqualsOperatorExpression) {
	do {
		var new_op = LessThanOrEqualToOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.5.5: replacing with =
@action replace
@property condition
pattern replacing_notequal_operator_with_equal
instance:IfStatement
	guard: instance.condition.isTypeOf(NotEqualsOperatorExpression) {
	do {
		var new_op = EqualsOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.6: replacing = with others
// 3.6.1: replacing with >
@action replace
@property condition
pattern replacing_equal_operator_with_gt
instance:IfStatement
	guard: instance.condition.isTypeOf(EqualsOperatorExpression) {
	do {
		var new_op = GreaterThanOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.6.2: replacing with >=
@action replace
@property condition
pattern replacing_equal_operator_with_gte
instance:IfStatement
	guard: instance.condition.isTypeOf(EqualsOperatorExpression) {
	do {
		var new_op = GreaterThanOrEqualToOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.6.3: replacing with <
@action replace
@property condition
pattern replacing_equal_operator_with_lt
instance:IfStatement
	guard: instance.condition.isTypeOf(EqualsOperatorExpression) {
	do {
		var new_op = LessThanOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.6.4: replacing with <=
@action replace
@property condition
pattern replacing_equal_operator_with_lte
instance:IfStatement
	guard: instance.condition.isTypeOf(EqualsOperatorExpression) {
	do {
		var new_op = LessThanOrEqualToOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}

// 3.6.5: replacing with <>
@action replace
@property condition
pattern replacing_equal_operator_with_notequal
instance:IfStatement
	guard: instance.condition.isTypeOf(EqualsOperatorExpression) {
	do {
		var new_op = NotEqualsOperatorExpression.createInstance();
		new_op.lhs = instance.condition.lhs;
		new_op.rhs = instance.condition.rhs;
		
		instance.condition = new_op;
	}
}