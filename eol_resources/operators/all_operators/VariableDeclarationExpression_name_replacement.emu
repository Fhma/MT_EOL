// operator: VariableDeclarationExpression_name_replacement
// desc: replaces a variable name with a new string
//
// Inherited operators: n/a 
////////////////////////////////////////////////////////////

operation getOperationOrModuleParent(e:Any):EOLElement {
	var loc = e;
	while(loc.isDefined()) {
		if(loc.isTypeOf(OperationDefinition) or loc.isTypeOf(EOLModule)) {
			return loc;
		}
		loc = loc.eContainer;
	}
	return null;
}

operation isSelfOrResult(instance:Any):Boolean {
	if(instance.eContainer.isTypeOf(OperationDefinition)
		and (instance.name.name = "self" or instance.name.name = "_result")) {
		return true;
	}
	return false;
}

// 1.0: change the name of variable and add _extra to it.
// Exceptions are done over self and _result built-in 
// variables of OperationDefinition
@action replace
@property name
pattern change_name
instance:VariableDeclarationExpression
	guard: (not isSelfOrResult(instance)) {
	do {
		var new_name = NameExpression.createInstance();
		// obtain a name from other vairable declarations
		var names = VariableDeclarationExpression.all.select(n| n.isTypeOf(VariableDeclarationExpression) and
			(not isSelfOrResult(n)) and
			getOperationOrModuleParent(n.container)=getOperationOrModuleParent(instance.container));
		new_name.name = names.random().name.name;
		if(new_name.name.isDefined() and new_name.name = instance.name.name)
			new_name.name = instance.name.name + "_extra";
		new_name.resolvedType = instance.name.resolvedType;
		instance.name = new_name;
	}
}