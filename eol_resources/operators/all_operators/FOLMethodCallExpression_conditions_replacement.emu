// operator: FOLMethodCallExpression_conditions_replacement
// desc: manipulate each condition exist in the list of 
// condition one at a time
//
// Inherited operators: Expression, FeatureCallExpression
////////////////////////////////////////////////////////////

// 1.0: neglete the state of condtion
// 1.1: neglete all expressions and add not operator only for FOL that 
// accept boolean as a parameter of evaluation
@action replace
@property conditions
@role instance
pattern neglete_and_add_NOT
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions 
	guard: not condition.isTypeOf(NotOperatorExpression)
	and ( instance.method.name="exists"  or
		instance.method.name="forAll"  or
		instance.method.name="one"  or
		instance.method.name="reject"  or
		instance.method.name="select"  or
		instance.method.name="selectOne") {
	do {
		var new_op = NotOperatorExpression.createInstance();
		new_op.expression = condition;
		new_op.expression.inBrackets = true;
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 1.2: neglete all not expression and remove not operator
@action replace
@property conditions
@role instance
pattern neglete_all_and_remove_NOT
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(NotOperatorExpression) {
	do {
		var new_condition = condition.expression;
		instance.conditions.remove(condition);
		instance.conditions.add(new_condition);
	}
}

//--------------------------------------------------------//
// 2.0: replacing of LogicalExpression (and, or, xor, implies)
// 2.1: replacing AndOperatorExpression with others
// 2.1.1: replacing AndOperatorExpression with or
@action replace
@property conditions
@role instance
pattern replacing_and_operator_with_or
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(AndOperatorExpression) {
	do {
		var new_op = OrOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 2.1.2: replacing AndOperatorExpression with xor
@action replace
@property conditions
@role instance
pattern replacing_and_operator_with_xor
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(AndOperatorExpression) {
	do {
		var new_op = XorOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 2.1.3: replacing AndOperatorExpression with implies
@action replace
@property conditions
@role instance
pattern replacing_and_operator_with_implies
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(AndOperatorExpression) {
	do {
		var new_op = ImpliesOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 2.2: replacing OrOperatorExpression with others
// 2.2.1: replacing OrOperatorExpression with and
@action replace
@property conditions
@role instance
pattern replacing_or_operator_with_and
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(OrOperatorExpression) {
	do {
		var new_op = AndOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 2.2.2: replacing OrOperatorExpression with xor
@action replace
@property conditions
@role instance
pattern replacing_or_operator_with_xor
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(OrOperatorExpression) {
	do {
		var new_op = XorOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 2.2.3: replacing OrOperatorExpression with implies
@action replace
@property conditions
@role instance
pattern replacing_or_operator_with_implies
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(OrOperatorExpression) {
	do {
		var new_op = ImpliesOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 2.3: replacing XorOperatorExpression with others
// 2.3.1: replacing XorOperatorExpression with and
@action replace
@property conditions
@role instance
pattern replacing_xor_operator_with_and
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(XorOperatorExpression) {
	do {
		var new_op = AndOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 2.3.2: replacing XorOperatorExpression with or
@action replace
@property conditions
@role instance
pattern replacing_xor_operator_with_or
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(XorOperatorExpression) {
	do {
		var new_op = OrOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 2.3.3: replacing XorOperatorExpression with implies
@action replace
@property conditions
@role instance
pattern replacing_xor_operator_with_implies
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(XorOperatorExpression) {
	do {
		var new_op = ImpliesOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 2.4: replacing ImpliesOperatorExpression with others
// 2.4.1: replacing ImpliesOperatorExpression with and
@action replace
@property conditions
@role instance
pattern replacing_implies_operator_with_and
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(ImpliesOperatorExpression) {
	do {
		var new_op = AndOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 2.4.2: replacing ImpliesOperatorExpression with or
@action replace
@property conditions
@role instance
pattern replacing_implies_operator_with_or
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(ImpliesOperatorExpression) {
	do {
		var new_op = OrOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 2.4.3: replacing ImpliesOperatorExpression with xor
@action replace
@property conditions
@role instance
pattern replacing_implies_operator_with_xor
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(ImpliesOperatorExpression) {
	do {
		var new_op = XorOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

//--------------------------------------------------------//
// 3.0: replacing of ComparisonOperator (>,>=,<,<=,<>,=)
// 3.1: replacing > with others
// 3.1.1: replacing with >=
@action replace
@property conditions
@role instance
pattern replacing_gt_operator_with_gte
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(GreaterThanOperatorExpression) {
	do {
		var new_op = GreaterThanOrEqualToOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 3.1.2: replacing with <
@action replace
@property conditions
@role instance
pattern replacing_gt_operator_with_lt
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(GreaterThanOperatorExpression) {
	do {
		var new_op = LessThanOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 3.1.3: replacing with <=
@action replace
@property conditions
@role instance
pattern replacing_gt_operator_with_lte
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(GreaterThanOperatorExpression) {
	do {
		var new_op = LessThanOrEqualToOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 3.1.4: replacing with <>
@action replace
@property conditions
@role instance
pattern replacing_gt_operator_with_ne
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(GreaterThanOperatorExpression) {
	do {
		var new_op = NotEqualsOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 3.1.5: replacing with =
@action replace
@property conditions
@role instance
pattern replacing_gt_operator_with_equal
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(GreaterThanOperatorExpression) {
	do {
		var new_op = EqualsOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

//----------------------------//
// 3.2: replacing >= with others
// 3.2.1: replacing with >
@action replace
@property conditions
@role instance
pattern replacing_gte_operator_with_gt
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(GreaterThanOrEqualToOperatorExpression) {
	do {
		var new_op = GreaterThanOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 3.2.2: replacing with <
@action replace
@property conditions
@role instance
pattern replacing_gte_operator_with_lt
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(GreaterThanOrEqualToOperatorExpression) {
	do {
		var new_op = LessThanOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 3.2.3: replacing with <=
@action replace
@property conditions
@role instance
pattern replacing_gte_operator_with_lte
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(GreaterThanOrEqualToOperatorExpression) {
	do {
		var new_op = LessThanOrEqualToOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 3.2.4: replacing with <>
@action replace
@property conditions
@role instance
pattern replacing_gte_operator_with_ne
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(GreaterThanOrEqualToOperatorExpression) {
	do {
		var new_op = NotEqualsOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 3.2.5: replacing with =
@action replace
@property conditions
@role instance
pattern replacing_gte_operator_with_equal
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(GreaterThanOrEqualToOperatorExpression) {
	do {
		var new_op = EqualsOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

//----------------------------//
// 3.3: replacing < with others
// 3.3.1: replacing with >
@action replace
@property conditions
@role instance
pattern replacing_lt_operator_with_gt
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(LessThanOperatorExpression) {
	do {
		var new_op = GreaterThanOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 3.3.2: replacing with >=
@action replace
@property conditions
@role instance
pattern replacing_lt_operator_with_gte
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(LessThanOperatorExpression) {
	do {
		var new_op = GreaterThanOrEqualToOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 3.3.3: replacing with <=
@action replace
@property conditions
@role instance
pattern replacing_lt_operator_with_lte
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(LessThanOperatorExpression) {
	do {
		var new_op = LessThanOrEqualToOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 3.3.4: replacing with <>
@action replace
@property conditions
@role instance
pattern replacing_lt_operator_with_ne
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(LessThanOperatorExpression) {
	do {
		var new_op = NotEqualsOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 3.3.5: replacing with =
@action replace
@property conditions
@role instance
pattern replacing_lt_operator_with_equal
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(LessThanOperatorExpression) {
	do {
		var new_op = EqualsOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

//----------------------------//
// 3.4: replacing <= with others
// 3.4.1: replaciing with >
@action replace
@property conditions
@role instance
pattern replacing_lte_operator_with_gt
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(LessThanOrEqualToOperatorExpression) {
	do {
		var new_op = GreaterThanOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 3.4.2: replacing with >=
@action replace
@property conditions
@role instance
pattern replacing_lte_operator_with_gte
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(LessThanOrEqualToOperatorExpression) {
	do {
		var new_op = GreaterThanOrEqualToOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 3.4.3: replacing with <
@action replace
@property conditions
@role instance
pattern replacing_lte_operator_with_lt
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(LessThanOrEqualToOperatorExpression) {
	do {
		var new_op = LessThanOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 3.4.4: replacing with <>
@action replace
@property conditions
@role instance
pattern replacing_lte_operator_with_ne
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(LessThanOrEqualToOperatorExpression) {
	do {
		var new_op = NotEqualsOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 3.4.5: replacing with =
@action replace
@property conditions
@role instance
pattern replacing_lte_operator_with_equal
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(LessThanOrEqualToOperatorExpression) {
	do {
		var new_op = EqualsOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

//----------------------------//
// 3.5: replacing <> with others
// 3.5.1: replacing with >
@action replace
@property conditions
@role instance
pattern replacing_ne_operator_with_gt
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(NotEqualsOperatorExpression) {
	do {
		var new_op = GreaterThanOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 3.5.2: replacing with >=
@action replace
@property conditions
@role instance
pattern replacing_ne_operator_with_gte
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(NotEqualsOperatorExpression) {
	do {
		var new_op = GreaterThanOrEqualToOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 3.5.3: replacing with <
@action replace
@property conditions
@role instance
pattern replacing_ne_operator_with_lt
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(NotEqualsOperatorExpression) {
	do {
		var new_op = LessThanOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 3.5.4: replacing with <=
@action replace
@property conditions
@role instance
pattern replacing_ne_operator_with_lte
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(NotEqualsOperatorExpression) {
	do {
		var new_op = LessThanOrEqualToOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 3.5.5: replacing with =
@action replace
@property conditions
@role instance
pattern replacing_ne_operator_with_equal
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(NotEqualsOperatorExpression) {
	do {
		var new_op = EqualsOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

//----------------------------//
// 3.6: replacing = with others
// 3.6.1: replacing with >
@action replace
@property conditions
@role instance
pattern replacing_equal_operator_with_gt
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(EqualsOperatorExpression) {
	do {
		var new_op = GreaterThanOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 3.6.2: replacing with >=
@action replace
@property conditions
@role instance
pattern replacing_equal_operator_with_gte
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(EqualsOperatorExpression) {
	do {
		var new_op = GreaterThanOrEqualToOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 3.6.3: replacing with <
@action replace
@property conditions
@role instance
pattern replacing_equal_operator_with_lt
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(EqualsOperatorExpression) {
	do {
		var new_op = LessThanOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 3.6.4: replacing with <=
@action replace
@property conditions
@role instance
pattern replacing_equal_operator_with_lte
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(EqualsOperatorExpression) {
	do {
		var new_op = LessThanOrEqualToOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}

// 3.6.5: replacing with <>
@action replace
@property conditions
@role instance
pattern replacing_equal_operator_with_ne
instance:FOLMethodCallExpression,
condition:Expression
	from: instance.conditions
	guard: condition.isTypeOf(EqualsOperatorExpression) {
	do {
		var new_op = NotEqualsOperatorExpression.createInstance();
		new_op.lhs = condition.lhs;
		new_op.rhs = condition.rhs;
		
		instance.conditions.remove(condition);
		instance.conditions.add(new_op);
	}
}