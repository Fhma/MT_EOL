// operator: SimpleAnnotationStatement_values_replacement
// desc: replaces the value from the collection with another value
//
// Inherited operators: Statement, AnnotationStatement 
////////////////////////////////////////////////////////////

operation getOperationOrModuleParent(e:Any):EOLElement {
	var loc = e;
	while(loc.isDefined()) {
		if(loc.isTypeOf(OperationDefinition) or loc.isTypeOf(EOLModule)) {
			return loc;
		}
		loc = loc.eContainer;
	}
	return null;
}

// 1.0: replaces a value with another name expression obtained from 
// same block
@action replace
@property values
@role instance
pattern replace_a_value_string
instance:SimpleAnnotationStatement,
element:StringExpression
	from: instance.values,
other_value:StringExpression
	from: StringExpression.all.select(e| getOperationOrModuleParent(e) = getOperationOrModuleParent(instance)) {
	do {
		var new_exp = StringExpression.createInstance();
		new_exp.value = other_value.value;
			
		instance.values.remove(element);
		instance.values.add(new_exp);
	}
}

