var ePackage = ECore!EPackage.all.first();
GmfTool!EPackage.all.first().eContents().println();
var toolRegistry = new GmfTool!ToolRegistry;
var palette = new GmfTool!Palette;
palette.title = ePackage.name + 'Palette';
toolRegistry.palette = palette;
var nodesToolGroup = new GmfTool!ToolGroup;
nodesToolGroup.title = 'Objects';
nodesToolGroup.collapsible = true;
palette.tools.add(nodesToolGroup);
var linksToolGroup;
linksToolGroup = new GmfTool!ToolGroup;
linksToolGroup.title = 'Connections';
linksToolGroup.collapsible = true;
palette.tools.add(linksToolGroup);
var canvas : new GmfGraph!Canvas;
canvas.name = ePackage.name;
var figureGallery : new GmfGraph!FigureGallery;
figureGallery.name = 'Default';
canvas.figures.add(figureGallery);
var mapping : new GmfMap!Mapping;
var canvasMapping : new GmfMap!CanvasMapping;
mapping.diagram = canvasMapping;
canvasMapping.diagramCanvas = canvas;
canvasMapping.domainModel = ePackage;
canvasMapping.domainMetaElement = getDiagramClass();
canvasMapping.palette = palette;
for(class in getNodes()) {
	var creationTool = createCreationTool(class);
	nodesToolGroup.tools.add(creationTool);
	class.~creationTool = creationTool;
	var figureDescriptor = createFigureDescriptor(class.name + 'Figure');
	class.~figureDescriptor = figureDescriptor;
	var figure = class.createFigure();
	figureDescriptor.actualFigure = figure;
	figure.name = figureDescriptor.name;
	var label = class.createLabel();
	label.name = class.getLabelName() + 'Figure';
	if(not class.getCompartmentReferences().isEmpty()) {
		var maxDimension = new GmfGraph!Dimension;
		maxDimension.dx = 10000;
		maxDimension.dy = 50;
		label.maximumSize = maxDimension;
	}
	var node = new GmfGraph!Node;
	node.name = class.name;
	node.figure = figureDescriptor;
	canvas.nodes.add(node);
	class.~diagramNode = node;
	if(class.getNodeSize().isDefined()) {
		var defaultSizeFacet = new GmfGraph!DefaultSizeFacet;
		node.facets.add(defaultSizeFacet);
		defaultSizeFacet.defaultSize = class.getNodeSize();
	}
	var nodeMapping : new GmfMap!NodeMapping;
	nodeMapping.diagramNode = node;
	nodeMapping.domainMetaElement = class;
	nodeMapping.tool = creationTool;
	class.~nodeMapping = nodeMapping;
	var labelPlacement = class.getLabelPlacement();
	if(labelPlacement <> 'none') {
		var diagramLabel = new GmfGraph!DiagramLabel;
		diagramLabel.name = class.getLabelName();
		diagramLabel.elementIcon = class.labelHasIcon(true);
		canvas.labels.add(diagramLabel);
		if(labelPlacement='internal') {
			figure.children.add(label);
			var childAccess : new GmfGraph!ChildAccess;
			childAccess.figure = label;
			childAccess.accessor = 'getFigure' + class.getLabelName() + 'Figure';
			figureDescriptor.accessors.add(childAccess);
			diagramLabel.accessor = childAccess;
			diagramLabel.figure = figureDescriptor;
		}
		else {
			var labelFigureDescriptor = createFigureDescriptor(class.name + 'LabelFigure');
			labelFigureDescriptor.actualFigure = label;
			diagramLabel.figure = labelFigureDescriptor;
		}
		class.~diagramLabel = diagramLabel;
		var featureLabelMapping : new GmfMap!FeatureLabelMapping;
		nodeMapping.labelMappings.add(featureLabelMapping);
		featureLabelMapping.diagramLabel = diagramLabel;
		featureLabelMapping.editPattern = class.getLabelEditPattern();
		featureLabelMapping.editorPattern = class.getLabelEditPattern();
		featureLabelMapping.viewPattern = class.getLabelViewPattern();
		featureLabelMapping.features.addAll(class.getLabelAttributes());
		featureLabelMapping.readOnly = class.getLabelReadOnly();
	}
	for(attribute in getLabelledAttributesFor(class)) {
		var label = new GmfGraph!Label;
		label.name = attribute.getLabelName() + 'Figure';
		label.text = attribute.getAnnotationValue('gmf.label', 'label.text');
		var diagramLabel = new GmfGraph!DiagramLabel;
		diagramLabel.name = attribute.getLabelName();
		diagramLabel.elementIcon = false;
		canvas.labels.add(diagramLabel);
		figure.children.add(label);
		var childAccess : new GmfGraph!ChildAccess;
		childAccess.figure = label;
		childAccess.accessor = 'getFigure' + label.name;
		figureDescriptor.accessors.add(childAccess);
		diagramLabel.accessor = childAccess;
		diagramLabel.figure = figureDescriptor;
		var featureLabelMapping : new GmfMap!FeatureLabelMapping;
		nodeMapping.labelMappings.add(featureLabelMapping);
		featureLabelMapping.diagramLabel = diagramLabel;
		featureLabelMapping.features.add(attribute);
		featureLabelMapping.editPattern = attribute.getLabelEditPattern();
		featureLabelMapping.editorPattern = attribute.getLabelEditPattern();
		featureLabelMapping.viewPattern = attribute.getLabelViewPattern();
		featureLabelMapping.features.addAll(attribute.getLabelAttributes());
		featureLabelMapping.readOnly = attribute.getReadOnly();
	}
}
for(containment in getDiagramClass().getContainmentReferences()) {
	for(class in containment.eType.getConcreteSubtypes().select(c|c.isNode())) {
		if(class.~topNodeReference.isUndefined()) {
			var topNodeReference = new GmfMap!TopNodeReference;
			mapping.nodes.add(topNodeReference);
			topNodeReference.containmentFeature = containment;
			class.~nodeMapping.~nested = true;
			topNodeReference.ownedChild = class.~nodeMapping;
			class.~topNodeReference = topNodeReference;
		}
	}
}
for(phantom in getPhantomNodes()) {
	if(phantom.~topNodeReference.isUndefined()) {
		var topNodeReference = new GmfMap!TopNodeReference;
		mapping.nodes.add(topNodeReference);
		topNodeReference.ownedChild = phantom.~nodeMapping;
		phantom.~topNodeReference = topNodeReference;
	}
}
for(class in getNodes()) {
	for(affixed in class.getAffixedReferences()) {
		for(child in getNodes().select(s|s=affixed.eType or s.eAllSuperTypes.includes(affixed.eType))) {
			if(not child.abstract) {
				var childReference = new GmfMap!ChildReference;
				class.~nodeMapping.children.add(childReference);
				childReference.containmentFeature = affixed;
				if(child.~nodeMapping.~nested.isDefined()) {
					childReference.referencedChild = child.~nodeMapping;
				}
				else {
					child.~nodeMapping.~nested = true;
					childReference.ownedChild = child.~nodeMapping;
				}
				child.~diagramNode.affixedParentSide = GmfGraph!Direction#NORTH;
			}
		}
	}
}
for(class in getNodes()) {
	for(containment in class.getCompartmentReferences()) {
		var referenceName = class.name + containment.name.firstToUpperCase();
		var figureDescriptor = class.~figureDescriptor;
		var figure = figureDescriptor.actualFigure;
		var compartmentRectangle = new GmfGraph!Rectangle;
		compartmentRectangle.outline = false;
		figure.children.add(compartmentRectangle);
		compartmentRectangle.name = referenceName + 'CompartmentFigure';
		var compartmentChildAccess = new GmfGraph!ChildAccess;
		figureDescriptor.accessors.add(compartmentChildAccess);
		compartmentChildAccess.figure = compartmentRectangle;
		compartmentChildAccess.accessor = 'get' + compartmentRectangle.name;
		var compartment = new GmfGraph!Compartment;
		compartment.name = referenceName + 'Compartment';
		compartment.collapsible = containment.isCollapsible();
		compartment.figure = class.~figureDescriptor;
		canvas.compartments.add(compartment);
		compartment.accessor = compartmentChildAccess;
		var compartmentMapping = new GmfMap!CompartmentMapping;
		compartmentMapping.compartment = compartment;
		class.~nodeMapping.compartments.add(compartmentMapping);
		class.~nodeMapping.relatedDiagrams.add(canvasMapping);
		for(child in getNodes().select(s|s=containment.eType or s.eAllSuperTypes.includes(containment.eType))) {
			if(not child.abstract) {
				var childReference = new GmfMap!ChildReference;
				class.~nodeMapping.children.add(childReference);
				childReference.compartment = compartmentMapping;
				childReference.containmentFeature = containment;
				if(child.~nodeMapping.~nested.isDefined()) {
					childReference.referencedChild = child.~nodeMapping;
				}
				else {
					child.~nodeMapping.~nested = true;
					childReference.ownedChild = child.~nodeMapping;
				}
			}
		}
	}
}
for(nodeMapping in GmfMap!NodeMapping.all.clone()) {
	if(nodeMapping.~nested.isUndefined()) {
		if(not nodeMapping.domainMetaElement.isPhantom()) {
			delete nodeMapping;
		}
	}
}
for(class in getLinks()) {
	if(getAllSuitableContainmentReferences(class).size()=0) {
		continue;
	}
	var creationTool = createCreationTool(class);
	linksToolGroup.tools.add(creationTool);
	var figureDescriptor = new GmfGraph!FigureDescriptor;
	figureDescriptor.name = class.name + 'Figure';
	figureGallery.descriptors.add(figureDescriptor);
	var polylineConnection = new GmfGraph!PolylineConnection;
	figureDescriptor.actualFigure = polylineConnection;
	polylineConnection.name = figureDescriptor.name;
	polylineConnection.formatConnection(class);
	var connection = new GmfGraph!Connection;
	connection.name = class.name;
	connection.figure = figureDescriptor;
	canvas.connections.add(connection);
	var linkMappings : Sequence();
	for(containmentFeature in getAllSuitableContainmentReferences(class)) {
		var linkMapping : new GmfMap!LinkMapping;
		mapping.links.add(linkMapping);
		linkMapping.containmentFeature = containmentFeature;
		linkMapping.diagramLink = connection;
		linkMapping.domainMetaElement = class;
		linkMapping.tool = creationTool;
		linkMapping.sourceMetaFeature = class.getLinkSourceFeature();
		linkMapping.linkMetaFeature = class.getLinkTargetFeature();
		linkMappings.add(linkMapping);
		var sourceEndConstraint = class.getSourceConstraint();
		var targetEndConstraint = class.getTargetConstraint();
		if(sourceEndConstraint.isDefined() or targetEndConstraint.isDefined()) {
			linkMapping.creationConstraints = new GmfMap!LinkConstraints;
			if(sourceEndConstraint.isDefined()) {
				linkMapping.creationConstraints.sourceEnd = new GmfMap!Constraint;
				linkMapping.creationConstraints.sourceEnd.body = sourceEndConstraint;
			}
			if(targetEndConstraint.isDefined()) {
				linkMapping.creationConstraints.targetEnd = new GmfMap!Constraint;
				linkMapping.creationConstraints.targetEnd.body = targetEndConstraint;
			}
		}
	}
	var hasLabel = not class.getLabelAttributes().isEmpty();
	if(hasLabel) {
		var labelFigureDescriptor = createFigureDescriptor(class.getLabelName() + 'Figure');
		var label = class.createLabel();
		label.name = class.getLabelName() + 'Label';
		labelFigureDescriptor.actualFigure = label;
		var diagramLabel = new GmfGraph!DiagramLabel;
		diagramLabel.figure = labelFigureDescriptor;
		diagramLabel.name = class.getLabelName();
		diagramLabel.elementIcon = class.labelHasIcon(false);
		canvas.labels.add(diagramLabel);
		var featureLabelMapping = new GmfMap!FeatureLabelMapping;
		featureLabelMapping.diagramLabel = diagramLabel;
		featureLabelMapping.editPattern = class.getLabelEditPattern();
		featureLabelMapping.editorPattern = class.getLabelEditPattern();
		featureLabelMapping.viewPattern = class.getLabelViewPattern();
		featureLabelMapping.features.addAll(class.getLabelAttributes());
		featureLabelMapping.readOnly = class.getLabelReadOnly();
		for(linkMapping in linkMappings) {
			linkMapping.labelMappings.add(featureLabelMapping);
		}
	}
}
for(reference in getReferenceLinks()) {
	var referenceName = reference.getLongName();
	var creationTool = createCreationTool(reference);
	linksToolGroup.tools.add(creationTool);
	var figureDescriptor = createFigureDescriptor(referenceName + 'Figure');
	var externalLabelFigureDescriptor = createFigureDescriptor(referenceName + 'ExternalLabelFigure');
	var externalLabel = new GmfGraph!Label;
	externalLabel.name = referenceName + 'ExternalLabel';
	externalLabel.text = reference.getLinkLabel();
	externalLabelFigureDescriptor.actualFigure = externalLabel;
	var externalDiagramLabel = new GmfGraph!DiagramLabel;
	externalDiagramLabel.figure = externalLabelFigureDescriptor;
	externalDiagramLabel.name = externalLabel.name;
	externalDiagramLabel.elementIcon = false;
	canvas.labels.add(externalDiagramLabel);
	var polylineConnection = new GmfGraph!PolylineConnection;
	figureDescriptor.actualFigure = polylineConnection;
	polylineConnection.name = figureDescriptor.name;
	var connection = new GmfGraph!Connection;
	connection.name = referenceName;
	connection.figure = figureDescriptor;
	canvas.connections.add(connection);
	polylineConnection.formatConnection(reference);
	var linkMapping : new GmfMap!LinkMapping;
	mapping.links.add(linkMapping);
	linkMapping.diagramLink = connection;
	linkMapping.linkMetaFeature = reference;
	linkMapping.tool = creationTool;
	var externalLabelMapping = new GmfMap!DesignLabelMapping;
	externalLabelMapping.readOnly = true;
	externalLabelMapping.diagramLabel = externalDiagramLabel;
	linkMapping.labelMappings.add(externalLabelMapping);
}
mapping.nodes = mapping.nodes.asSequence().sortBy(n|-n.ownedChild.domainMetaElement.eAllSuperTypes.size());
mapping.links = mapping.links.asSequence().select(l|l.domainMetaElement.isDefined()).sortBy(l|-l.domainMetaElement.eAllSuperTypes.size()) + mapping.links.asSequence().select(l|l.domainMetaElement.isUndefined());
for(nodeMapping in GmfMap!NodeMapping.all) {
	nodeMapping.children = nodeMapping.children.asSequence().sortBy(cr|-cr.getDomainMetaElement().eAllSuperTypes.size());
}
for(compartmentMapping in GmfMap!CompartmentMapping.all) {
	compartmentMapping.children = compartmentMapping.children.asSequence().sortBy(cr|-cr.getDomainMetaElement().eAllSuperTypes.size());
}
nodesToolGroup.tools = nodesToolGroup.tools.sortBy(t|t.title);
if(linksToolGroup.isDefined()) {
	linksToolGroup.tools = linksToolGroup.tools.sortBy(t|t.title);
}
if(nodesToolGroup.tools.size()=0) {
	delete nodesToolGroup;
}
if(linksToolGroup.tools.size()=0) {
	delete linksToolGroup;
}

operation ECore!EClass createLabel()  {
	var labelClass = self.getLabelClass();
	var figure;
	if(labelClass.isDefined()) {
		figure = new GmfGraph!CustomFigure;
		figure.qualifiedClassName = labelClass;
	}
	else {
		figure = new GmfGraph!Label;
		figure.text = self.getLabelText();
	}
	return figure;
}
operation GmfMap!NodeReference getDomainMetaElement()  {
	if(self.referencedChild.isDefined()) {
		return self.referencedChild.domainMetaElement;
	}
	else {
		return self.ownedChild.domainMetaElement;
	}
}
operation createFigureDescriptor(name : String)  {
	var figureDescriptor = new GmfGraph!FigureDescriptor;
	figureDescriptor.name = name;
	figureGallery.descriptors.add(figureDescriptor);
	return figureDescriptor;
}
operation createCreationTool(element : Any)  {
	var annotation : String;
	if(element.isKindOf(ECore!EClass) and element.isNode()) {
		annotation = 'gmf.node';
	}
	else {
		annotation = 'gmf.link';
	}
	var toolName = element.getAnnotationValue(annotation, 'tool.name');
	if(toolName.isUndefined()) {
		if(element.isKindOf(ECore!EClass)) {
			toolName = element.name;
		}
		else {
			toolName = element.name.firstToUpperCase();
		}
	}
	var toolDescription = element.getAnnotationValue(annotation, 'tool.description');
	if(toolDescription.isUndefined()) {
		toolDescription = 'Create new ' + toolName;
	}
	var creationTool = new GmfTool!CreationTool;
	creationTool.title = toolName;
	creationTool.description = toolDescription;
	creationTool.smallIcon = createToolImage(element.getAnnotationValue(annotation, 'tool.small.path'), element.getAnnotationValue(annotation, 'tool.small.bundle'));
	creationTool.largeIcon = createToolImage(element.getAnnotationValue(annotation, 'tool.large.path'), element.getAnnotationValue(annotation, 'tool.large.bundle'));
	return creationTool;
}
operation createToolImage(path : String, bundle : String)  {
	if(path.isUndefined()) {
		return new GmfTool!DefaultImage;
	}
	else {
		var bundleImage = new GmfTool!BundleImage;
		bundleImage.path = path;
		bundleImage.bundle = bundle;
		return bundleImage;
	}
}
operation createReferenceCreationTool(name : String)  {
	var creationTool = new GmfTool!CreationTool;
	creationTool.title = name;
	creationTool.description = 'Create new ' + name;
	creationTool.smallIcon = createRefLinkIcon();
	creationTool.largeIcon = createRefLinkIcon();
	return creationTool;
}
operation createRefLinkIcon()  {
	var icon = new GmfTool!BundleImage;
	icon.bundle = 'org.eclipse.epsilon.eugenia.runtime';
	icon.path = 'icons/Link.gif';
	return icon;
}
@cached
operation getNodes()  {
	return ECore!EClass.all.select(c|c.isNode());
}
@cached
operation getPhantomNodes()  {
	return ECore!EClass.all.select(c|c.isPhantom());
}
@cached
operation getLinks()  {
	return ECore!EClass.all.select(c|c.isLink());
}
@cached
operation getLabelledAttributesFor(class : ECore!EClass)  {
	return class.eAllAttributes.select(a|a.isLabelled());
}
@cached
operation getReferenceLinks()  {
	var diagramClass = getDiagramClass();
	if(diagramClass.getAnnotationValue('gmf.diagram', 'refsarelinks')='true') {
		return ECore!EReference.all.select(r|r.containment=false);
	}
	else {
		return ECore!EReference.all.select(r|r.isLink());
	}
}
@cached
operation ECore!EClass getAllConcreteSubTypes()  {
	return ECore!EClass.all.select(c|not c.abstract and c.eAllSuperTypes.includes(self));
}
operation getDiagramClass() : ECore!EClass  {
	return ECore!EClass.all.selectOne(c|c.isAnnotatedAs('gmf.diagram'));
}
operation getDiagramContainmentReference(class : ECore!EClass)  {
	for(ref in getDiagramClass().getContainmentReferences()) {
		if(class.eAllSuperTypes.includes(ref.eType) or class=ref.eType) {
			return ref;
		}
	}
}
operation getOneSuitableContainmentReference(class : ECore!EClass)  {
	for(ref in ECore!EReference.all.select(sf|sf.containment)) {
		if(class.eAllSuperTypes.includes(ref.eType) or class=ref.eType) {
			return ref;
		}
	}
}
@cached
operation getAllSuitableContainmentReferences(class : ECore!EClass)  {
	var suitableReferences : Sequence();
	for(ref in ECore!EReference.all.select(sf|sf.containment)) {
		if(class.eAllSuperTypes.includes(ref.eType) or class=ref.eType) {
			suitableReferences.add(ref);
		}
	}
	return suitableReferences;
}
@cached
operation ECore!EClass getContainmentReferences()  {
	return self.eAllStructuralFeatures.select(sf : ECore!EReference|sf.containment);
}
@cached
operation ECore!EClass getCompartmentReferences()  {
	return self.getContainmentReferences().select(r|r.isAnnotatedAs('gmf.compartment'));
}
@cached
operation ECore!EClass getAffixedReferences()  {
	return self.getContainmentReferences().select(r|r.isAnnotatedAs('gmf.affixed'));
}
@cached
operation ECore!EReference isListLayout() : Boolean  {
	var label = self.getAnnotationValue('gmf.compartment', 'layout');
	if(label='list') {
		return true;
	}
	else {
		return false;
	}
}
@cached
operation ECore!EReference isCollapsible() : Boolean  {
	var label = self.getAnnotationValue('gmf.compartment', 'collapsible');
	if(label='false') {
		return false;
	}
	else {
		return true;
	}
}
@cached
operation ECore!EReference getLinkLabel() : String  {
	var customText = self.getAnnotationValue('gmf.link', 'label.text');
	if(customText.isDefined()) {
		return customText;
	}
	return self.getAnnotationValue('gmf.link', 'label');
}
@cached
operation ECore!EReference getLongName() : String  {
	return self.eContainingClass.name + self.name.firstToUpperCase();
}
@cached
operation ECore!EReference getLinkIncoming() : Boolean  {
	return self.getAnnotationValue('gmf.link', 'incoming')='true';
}
@cached
operation ECore!EClass getConcreteSubtypes()  {
	var firsts = ECore!EClass.all.select(e|not e.abstract);
	return firsts.all.select(e|e.eAllSuperTypes.includes(self) or e=self);
}
@cached
operation ECore!EClass getNodeSize()  {
	var size = self.getAnnotationValue('gmf.node', 'size');
	if(not size.isDefined()) {
		return size;
	}
	else {
		var d : new GmfGraph!Dimension;
		d.dx = size.split(',').at(0).asInteger();
		d.dy = size.split(',').at(1).asInteger();
		return d;
	}
}
@cached
operation ECore!EClass getNodeSize()  {
	var size = self.getAnnotationValue('gmf.node', 'size');
	if(not size.isDefined()) {
		return size;
	}
	else {
		var d : new GmfGraph!Dimension;
		d.dx = size.split(',').at(0).asInteger();
		d.dy = size.split(',').at(1).asInteger();
		return d;
	}
}
operation ECore!EClass getLinkEndFeature(name : String)  {
	var featureName = self.getAnnotationValue('gmf.link', name);
	return self.eAllStructuralFeatures.selectOne(sf|sf.name=featureName);
}
@cached
operation ECore!EClass getLinkIncoming() : Boolean  {
	return self.getAnnotationValue('gmf.link', 'incoming')='true';
}
@cached
operation ECore!EClass getLinkSourceFeature()  {
	return self.getLinkEndFeature('source');
}
@cached
operation ECore!EClass getLinkTargetFeature()  {
	return self.getLinkEndFeature('target');
}
@cached
operation ECore!EClass getSourceConstraint()  {
	return self.getAnnotationValue('gmf.link', 'source.constraint');
}
@cached
operation ECore!EClass getTargetConstraint()  {
	return self.getAnnotationValue('gmf.link', 'target.constraint');
}
@cached
operation ECore!EReference isLink() : Boolean  {
	return self.isAnnotatedAs('gmf.link');
}
@cached
operation ECore!EClass isLink() : Boolean  {
	if(self.abstract) {
		return false;
	}
	var isLink = self.isAnnotatedAs('gmf.link');
	var isNoLink = self.isAnnotatedAs('gmf.nolink');
	if(isNoLink) {
		return false;
	}
	else {
		return self.eSuperTypes.exists(s|s.isLink());
	}
	return isLink;
}
@cached
operation ECore!EClass isNode() : Boolean  {
	if(self.isLink()) {
		return false;
	}
	if(self.abstract) {
		return false;
	}
	var isNode = self.isAnnotatedAs('gmf.node');
	var isNoNode = self.isAnnotatedAs('gmf.nonode');
	if(isNoNode) {
		return false;
	}
	else {
		return self.eSuperTypes.exists(s|s.isNode());
	}
	return isNode;
}
@cached
operation ECore!EClass getLabelName() : String  {
	return self.name + 'Label';
}
@cached
operation ECore!EClass getLabelPlacement() : String  {
	var labelPosition = self.getAnnotationValue('gmf.node', 'label.placement');
	if(labelPosition.isUndefined()) {
		return 'internal';
	}
	else {
		return labelPosition;
	}
}
@cached
operation ECore!EClass labelHasIcon(defaultValue : Boolean) : Boolean  {
	var ann : String;
	if(self.isNode()) {
		ann = 'gmf.node';
	}
	else {
		ann = 'gmf.link';
	}
	var hasIcon = self.getAnnotationValue(ann, 'label.icon');
	if(hasIcon.isUndefined()) {
		return defaultValue;
	}
	else {
		return false;
	}
}
@cached
operation ECore!EClass getLabelViewPattern()  {
	var ann : String;
	if(self.isNode()) {
		ann = 'gmf.node';
	}
	else {
		ann = 'gmf.link';
	}
	return self.getLabelViewPattern(ann);
}
@cached
operation ECore!EClass getLabelEditPattern()  {
	var ann : String;
	if(self.isNode()) {
		ann = 'gmf.node';
	}
	else {
		ann = 'gmf.link';
	}
	return self.getLabelEditPattern(ann);
}
@cached
operation ECore!EClass getLabelParser()  {
	var ann : String;
	if(self.isNode()) {
		ann = 'gmf.node';
	}
	else {
		ann = 'gmf.link';
	}
	return self.getLabelParser(ann);
}
@cached
operation ECore!EClass getLabelText()  {
	var ann : String;
	if(self.isNode()) {
		ann = 'gmf.node';
	}
	else {
		ann = 'gmf.link';
	}
	var customText = self.getAnnotationValue(ann, 'label.text');
	if(customText.isDefined()) {
		return customText;
	}
	else {
		return self.name;
	}
}
@cached
operation ECore!EClass isPhantom()  {
	if(self.isNode()) {
		return self.getAnnotationValue('gmf.node', 'phantom')='true';
	}
	else {
		return false;
	}
}
operation ECore!EClass getLabelClass()  {
	var ann : String;
	if(self.isNode()) {
		ann = 'gmf.node';
	}
	else {
		ann = 'gmf.link';
	}
	return self.getAnnotationValue(ann, 'label.impl');
}
operation ECore!EClass getLabelAttributes()  {
	var ann : String;
	if(self.isNode()) {
		ann = 'gmf.node';
	}
	else {
		ann = 'gmf.link';
	}
	return self.getLabelAttributes(ann);
}
@cached
operation ECore!EClass getLabelReadOnly() : Boolean  {
	var ann : String;
	if(self.isNode()) {
		ann = 'gmf.node';
	}
	else {
		ann = 'gmf.link';
	}
	return self.getAnnotationValue(ann, 'label.readOnly')='true';
}
@cached
operation ECore!EAttribute isLabelled() : Boolean  {
	return self.isAnnotatedAs('gmf.label');
}
@cached
operation ECore!EAttribute getLabelName() : String  {
	return self.eContainingClass.name + self.name.firstToUpperCase() + 'Label';
}
@cached
operation ECore!EAttribute getReadOnly() : Boolean  {
	return self.getAnnotationValue('gmf.label', 'readOnly')='true';
}
@cached
operation ECore!EAttribute getLabelViewPattern()  {
	return self.getLabelViewPattern('gmf.label');
}
@cached
operation ECore!EAttribute getLabelEditPattern()  {
	return self.getLabelEditPattern('gmf.label');
}
@cached
operation ECore!EAttribute getLabelParser()  {
	return self.getLabelParser('gmf.label');
}
@cached
operation ECore!EAttribute getLabelAttributes()  {
	return self.getLabelAttributes('gmf.label');
}
@cached
operation ECore!EAnnotation getDetail(key : String) : String  {
	var detail = self.details.selectOne(d|d.key=key);
	if(detail.isDefined()) {
		return detail.value;
	}
	else {
		return null;
	}
}
operation ECore!EModelElement getLabelParser(ann : String)  {
	return self.getAnnotationValue(ann, 'label.parser');
}
operation ECore!EModelElement getLabelEditPattern(ann : String)  {
	return self.getLabelPattern(ann, 'label.edit.pattern', 'label.pattern');
}
operation ECore!EModelElement getLabelViewPattern(ann : String)  {
	return self.getLabelPattern(ann, 'label.view.pattern', 'label.pattern');
}
operation ECore!EModelElement getLabelPattern(ann : String, subtype : String, fallback : String)  {
	var pattern = self.getAnnotationValue(ann, subtype);
	if(pattern.isDefined()) {
		return pattern;
	}
	else {
		return self.getAnnotationValue(ann, fallback);
	}
}
operation ECore!EModelElement getLabelAttributes(ann : String)  {
	var labelAnnotationValue = self.getAnnotationValue(ann, 'label');
	if(labelAnnotationValue.isDefined()) {
		var labels = labelAnnotationValue.split(',').collect(s|s.trim());
		return self.eAllStructuralFeatures.select(f|labels.exists(s|s=f.name));
	}
	else {
		return Sequence{};
	}
}
operation ECore!EModelElement getAnnotationValue(name : String, detail : String) : Any  {
	var ann = self.eAnnotations.selectOne(a|a.source=name);
	var det;
	if(ann.isDefined()) {
		det = ann.details.selectOne(d|d.key=detail);
	}
	if(det.isDefined()) {
		return det.value;
	}
	return det;
}
@cached
operation ECore!EModelElement getAnnotation(name : String) : ECore!EAnnotation  {
	var ann = self.eAnnotations.selectOne(a|a.source=name);
	if(self.isTypeOf(ECore!EClass) and ann.isUndefined()) {
		for(s in self.eSuperTypes) {
			var sann = s.getAnnotation(name);
			if(sann.isDefined()) {
				return sann;
			}
		}
	}
	return ann;
}
@cached
operation ECore!EModelElement isAnnotatedAs(name : String) : Boolean  {
	return self.getAnnotation(name).isDefined();
}
@cached
operation ECore!EReference isLabelled() : Boolean  {
	return false;
}
operation ECore!EClass createFigure()  {
	var shapeName = self.getFormatOption('figure');
	var marginSize = self.getFormatOption('margin');
	if(marginSize.isUndefined()) {
		marginSize = 5;
	}
	else {
		marginSize = marginSize.asInteger();
	}
	var shape;
	if(shapeName='rectangle') {
		shape = new GmfGraph!Rectangle;
	}
	else {
		shape = new GmfGraph!CustomFigure;
		shape.qualifiedClassName = shapeName;
		marginSize = 0;
	}
	if(marginSize > 0) {
		var marginBorder = new GmfGraph!MarginBorder;
		var insets = new GmfGraph!Insets;
		var border = marginSize;
		insets.top = border;
		insets.bottom = border;
		insets.left = border;
		insets.right = border;
		marginBorder.insets = insets;
		shape.border = marginBorder;
	}
	shape.formatNode(self);
	return shape;
}
operation GmfGraph!Figure formatLine(color : String, width : String, style : String)  {
	if(color.isDefined()) {
		self.foregroundColor = createColor(color);
	}
	if(width.isDefined() and self.isKindOf(GmfGraph!Shape)) {
		self.lineWidth = width.asInteger();
	}
	if(style.isDefined() and self.isKindOf(GmfGraph!Shape)) {
		if(style='dash') {
			self.lineKind = GmfGraph!LineKind#LINE_DASH;
		}
	}
}
operation GmfGraph!Figure formatNode(e : ECore!EModelElement)  {
	var backgroundColor = e.getFormatOption('color');
	if(backgroundColor.isDefined()) {
		self.backgroundColor = createColor(backgroundColor);
	}
	var size = e.getFormatOption('size');
	if(size.isDefined()) {
		self.preferredSize = createDimension(size);
	}
	self.formatLine(e.getFormatOption('border.color'), e.getFormatOption('border.width'), e.getFormatOption('border.style'));
}
operation GmfGraph!PolylineConnection formatConnection(e)  {
	self.sourceDecoration = createPolylineDecoration(self.name + 'SourceDecoration', e.getFormatOption('source.decoration'));
	self.targetDecoration = createPolylineDecoration(self.name + 'TargetDecoration', e.getFormatOption('target.decoration'));
	self.formatLine(e.getFormatOption('color'), e.getFormatOption('width'), e.getFormatOption('style'));
}
operation createPolylineDecoration(name : String, type : String)  {
	var polylineDecoration;
	if(type='none' or type.isUndefined()) {
	}
	else {
		polylineDecoration = new GmfGraph!CustomDecoration;
		polylineDecoration.qualifiedClassName = type;
		polylineDecoration.name = name;
	}
	if(polylineDecoration.isDefined() and figureGallery.figures.excludes(polylineDecoration)) {
		figureGallery.figures.add(polylineDecoration);
	}
	return polylineDecoration;
}
@cached
operation createRhomb(filled : Boolean) : GmfGraph!PolygonDecoration  {
	var rhomb = new GmfGraph!PolygonDecoration;
	rhomb.name = 'Rhomb';
	if(filled) {
		rhomb.name = 'Filled' + rhomb.name;
	}
	rhomb.template.add(createPoint(-1, 1));
	rhomb.template.add(createPoint(0, 0));
	rhomb.template.add(createPoint(-1, -1));
	rhomb.template.add(createPoint(-2, 0));
	rhomb.template.add(createPoint(-1, 1));
	if(not filled) {
		var bg = new GmfGraph!ConstantColor;
		bg.value = GmfGraph!ColorConstants#white;
		rhomb.backgroundColor = bg;
	}
	return rhomb;
}
@cached
operation createClosedArrow(filled : Boolean) : GmfGraph!PolygonDecoration  {
	var arrow = new GmfGraph!PolygonDecoration;
	arrow.name = 'ClosedArrow';
	if(filled) {
		arrow.name = 'Filled' + arrow.name;
	}
	arrow.template.add(createPoint(0, 0));
	arrow.template.add(createPoint(-2, 2));
	arrow.template.add(createPoint(-2, -2));
	arrow.template.add(createPoint(0, 0));
	if(not filled) {
		var bg = new GmfGraph!ConstantColor;
		bg.value = GmfGraph!ColorConstants#white;
		arrow.backgroundColor = bg;
	}
	return arrow;
}
@cached
operation createSquare(filled : Boolean) : GmfGraph!PolygonDecoration  {
	var rect = new GmfGraph!PolygonDecoration;
	rect.name = 'Sqare';
	if(filled) {
		rect.name = 'Filled' + rect.name;
	}
	rect.template.add(createPoint(0, 1));
	rect.template.add(createPoint(-1, 1));
	rect.template.add(createPoint(-1, -1));
	rect.template.add(createPoint(0, -1));
	rect.template.add(createPoint(0, 1));
	if(not filled) {
		var bg = new GmfGraph!ConstantColor;
		bg.value = GmfGraph!ColorConstants#white;
		rect.backgroundColor = bg;
	}
	return rect;
}
operation createPoint(x : Integer, y : Integer) : GmfGraph!Point  {
	var p : new GmfGraph!Point;
	p.x = x;
	p.y = y;
	return p;
}
operation createColor(rgb : String) : GmfGraph!Color  {
	var color = new GmfGraph!RGBColor;
	var parts = rgb.split(',');
	color.red = parts.at(0).asInteger();
	color.green = parts.at(1).asInteger();
	color.blue = parts.at(2).asInteger();
	return color;
}
operation createDimension(size : String) : GmfGraph!Dimension  {
	var parts = size.split(',');
	var dimension = new GmfGraph!Dimension;
	dimension.dx = parts.first.asInteger();
	dimension.dy = parts.last.asInteger();
	return dimension;
}
operation ECore!EModelElement getFormatOption(option : String) : String  {
	var value = self.getAnnotationValue('gmf.node', option);
	if(value.isUndefined()) {
		value = self.getAnnotationValue('gmf.link', option);
	}
	return value;
}