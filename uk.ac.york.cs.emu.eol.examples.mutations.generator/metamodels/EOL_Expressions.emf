@namespace(uri="http://www.eclipse.org/epsilon/eol_expression", prefix="eol_expression")
package eol_expression;

abstract class Expression {
  val Type[1] resolvedType;
  attr boolean[1] inBrackets = false;
}

abstract class OperatorExpression extends Expression {
}

abstract class UnaryOperatorExpression extends OperatorExpression {
  val Expression[1] expression;
}

class NotOperatorExpression extends UnaryOperatorExpression {
}

class NegativeOperatorExpression extends UnaryOperatorExpression {
}

abstract class BinaryOperatorExpression extends OperatorExpression {
  val Expression[1] lhs;
  val Expression[1] rhs;
}

abstract class LogicalOperatorExpression extends BinaryOperatorExpression {
}

class AndOperatorExpression extends LogicalOperatorExpression {
}

class XorOperatorExpression extends LogicalOperatorExpression {
}

class OrOperatorExpression extends LogicalOperatorExpression {
}

class ImpliesOperatorExpression extends LogicalOperatorExpression {
}

abstract class ArithmeticOperatorExpression extends BinaryOperatorExpression {
}

class DivideOperatorExpression extends ArithmeticOperatorExpression {
}

class MultiplyOperatorExpression extends ArithmeticOperatorExpression {
}

class MinusOperatorExpression extends ArithmeticOperatorExpression {
}

class PlusOperatorExpression extends ArithmeticOperatorExpression {
}

abstract class ComparisonOperatorExpression extends BinaryOperatorExpression {
}

class GreaterThanOrEqualToOperatorExpression extends ComparisonOperatorExpression {
}

class GreaterThanOperatorExpression extends ComparisonOperatorExpression {
}

class LessThanOrEqualToOperatorExpression extends ComparisonOperatorExpression {
}

class LessThanOperatorExpression extends ComparisonOperatorExpression {
}

class NotEqualsOperatorExpression extends ComparisonOperatorExpression {
}

class EqualsOperatorExpression extends ComparisonOperatorExpression {
}

class VariableDeclarationExpression extends Expression {
  attr boolean[1] create;
  val NameExpression[1] name;
}

class FormalParameterExpression extends VariableDeclarationExpression {
}

class NameExpression extends Expression {
  attr String[1] name;
  attr boolean[1] isType;
}

abstract class FeatureCallExpression extends Expression {
  val Expression target;
  attr boolean[1] arrow = false;
}

class MethodCallExpression extends FeatureCallExpression {
  val Expression[*] arguments;
  val NameExpression[1] method;
}

class PropertyCallExpression extends FeatureCallExpression {
  attr boolean extended = false;
  val NameExpression[1] property;
}

class FOLMethodCallExpression extends FeatureCallExpression {
  val FormalParameterExpression[1] iterator;
  val Expression[+] conditions;
  val NameExpression[1] method;
}

class KeyValueExpression extends Expression {
  val Expression[1] key;
  val Expression[1] value;
}

class NewExpression extends Expression {
  val NameExpression[1] typeName;
  val Expression[*] parameters;
}

class MapExpression extends Expression {
  val KeyValueExpression[*] keyValues;
}

abstract class CollectionExpression extends Expression {
  val Expression[*] contents;
  val CollectionInitialisationExpression parameterList;
}

abstract class PrimitiveExpression extends Expression {
}

abstract class ComparableExpression extends PrimitiveExpression {
}

abstract class SummableExpression extends PrimitiveExpression {
}

class StringExpression extends ComparableExpression, SummableExpression {
  attr String[1] value;
}

class BooleanExpression extends PrimitiveExpression {
  attr boolean[1] value;
}

class RealExpression extends ComparableExpression, SummableExpression {
  attr double[1] value;
}

class IntegerExpression extends ComparableExpression, SummableExpression {
  attr int[1] value;
}

class BagExpression extends CollectionExpression {
}

class SetExpression extends UniqueCollection {
}

class OrderedSetExpression extends OrderedCollection, UniqueCollection {
}

class SequenceExpression extends OrderedCollection {
}

abstract class OrderedCollection extends CollectionExpression {
}

abstract class UniqueCollection extends CollectionExpression {
}

class EnumerationLiteralExpression extends Expression {
  val NameExpression[1] literal;
  val NameExpression[1] enumeration;
  val NameExpression[1] model;
}

abstract class CollectionInitialisationExpression extends Expression {
}

class ExpressionRange extends CollectionInitialisationExpression {
  val Expression[1] start;
  val Expression[1] end;
}

class ExpressionList extends CollectionInitialisationExpression {
  val Expression[+] expressions;
}

abstract class Statement {
}

class Type {
}


