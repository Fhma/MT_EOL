run();

operation run()  {
	var s : Node;
	s = Node.allInstances.select(n|n.label='a').first();
	for(n in Node.allInstances) {
		n.~distance = 10000;
	}
	s.~distance = 0;
	var Q : Sequence(Node) = Node.allInstances.clone();
while (not Q.isEmpty()) {
		var u : Node = Q.extractMin();
		for(e in u.edges) {
			var v : Node = e.target;
			if(u.~distance + e.weight > v.~distance) {
				v.~distance = u.~distance + e.weight;
				v.~previous = u;
			}
		}

	}
	for(n in Node.allInstances) {
		('Distance of ' + n.label + ' from ' + s.label + ' : ' + n.~distance + ' via ' + n.getPath()).println();
	}
}
operation Sequence(Node) extractMin() : Node  {
	var min : Node;
	min = self.select(n|self.forAll(n1|n.~distance <= n1.~distance)).first();
	self.remove(min);
	return min;
}
operation Node getPath() : String  {
	if(self.~previous.isDefined()) {
		return self.~previous.getPath() + '->' + self.label;
	}
	return self.label;
}
operation printGraph()  {
	'Printing graph:'.println();
	var visited : OrderedSet(Node);
	var edges : OrderedSet(Edge);
	for(n in Node.all) {
		visited.add(n);
		edges.clear();
		edges = n.edges.select(nn|not visited.includes(nn.target));
		for(edge in edges) {
			(n.label + ' TO ' + edge.target.label + ' : ' + edge.weight).println();
		}
	}
	'End of graph:'.println();
}