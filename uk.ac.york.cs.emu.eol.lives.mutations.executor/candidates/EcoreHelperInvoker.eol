import 'EcoreHelper.eol';

var classes = EClass.allInstances();
for(c in classes) {
	var returned = c.getRequriedImports("mainpackage","I","","","");
	"getRequriedImports(mainpackage,I,,,)".println();
	for(item in returned){
		item.println();
	}
	"getRequriedImports(mainpackage,I,,,,true)".println();
	returned = c.getRequriedImports("mainpackage","I","","","",true);
	for(item in returned){
		item.println();
	}
	"getRequriedImports(mainpackage,I,,,,true,true)".println();
	returned = c.getRequriedImports("mainpackage","I","","","",true,true);
	for(item in returned){
		item.println();
	}
	"getRequiredFeatureParameters(,)".println();
	returned = c.getRequiredFeatureParameters("","");
	for(item in returned){
		item.println();
	}
	
	"getCorrectPackage(mainpackage, self)".println();
	returned = c.getCorrectPackage("basePackage",c);
	returned.println();
		
	"getContainerReference()".println();
	returned = c.getContainerReference();
	if(returned.first().isDefined())
		returned.first().getName().println("container: ");
	if(returned.second().isDefined())
		returned.second().getName().println("type: ");
	if(returned.third().isDefined())
		returned.third().getName().println("opposite: ");
		
	"getEqualsReferences()".println();
	returned = c.getEqualsReferences();
	for(item in returned){
		item.getName().println();
	}
	
	"getRequiredFeatures()".println();
	returned = c.getRequiredFeatures();
	for(item in returned){
		item.getName().println();
	}
	
	"getSelect()".println();
	returned = c.getSelect();
	for(item in returned){
		item.first().getName().println();
		item.second().println();
	}
	
	"getIndex()".println();
	returned = c.getIndex();
	if(returned.isDefined()){
		if(returned.first().isDefined())
			returned.first().println();
		if(returned.second().isDefined())
			returned.second().println();
	}
	
	"getIndexAttributes()".println();
	returned = c.getIndexAttributes();
	for(item in returned){
		item.getName().println();
	}
	
	"findIndexAnnotation()".println();
	returned = c.findIndexAnnotation();
	if(returned.isDefined()){
		returned.source.println();
		if(returned.details.isDefined())
		{
			for (val in returned.details.values())
				val.println();
		}
	}
	
	"getEAllSubclasses()".println();
	returned = c.getEAllSubclasses();
	for(item in returned){
		item.getName().println();
	}
} // end eclass

for(es in EStructuralFeature.all){
	"getRequiredImports(true)".println();
	var returned = es.getRequiredImports(true);
	for(item in returned){
		item.println();
	}
	
	"getRequiredImports(false)".println();
	returned = es.getRequiredImports(false);
	for(item in returned){
		item.println();
	}
}

for(attr in EAttribute.all) {
	"getImports(true)".println();
	var returned = attr.getImports(true);
	for(item in returned){
		item.println();
	}
	"getImports(false)".println();
	returned = attr.getImports(false);
	for(item in returned){
		item.println();
	}
}

"isEdge()".println();
for(r in EReference.allInstances()) {
	r.isEdge().println();
}
	
"getJavaClassName()".println();
for(dt in EDataType.all){
	dt.getJavaClassName().println();
}