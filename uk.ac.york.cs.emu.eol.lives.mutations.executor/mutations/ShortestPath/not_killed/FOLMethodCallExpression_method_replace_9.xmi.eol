var s : Node;
s = Node.allInstances.first();
for(n in Node.allInstances) {
	n.~distance = 10000;
}
s.~distance = 0;
var Q : Sequence(Node);
Q = Node.allInstances.clone();
while (not Q.isEmpty()) {
	var u : Node;
	u = Q.extractMin();
	for(e in u.outgoing) {
		var v : Node;
		v = e.target;
		if(u.~distance + e.weight < v.~distance) {
			v.~distance = u.~distance + e.weight;
			v.~previous = u;
		}
	}

}
for(n in Node.allInstances) {
	('Distance of ' + n.label + ' from ' + s.label + ' : ' + n.~distance + ' via ' + n.getPath()).println();
}

operation Sequence extractMin() : Node  {
	var min : Node;
	min = self.select(n|self.exists(n1|n.~distance <= n1.~distance)).first();
	self.remove(min);
	return min;
}
operation Node getPath() : String  {
	if(self.~previous.isDefined()) {
		return self.~previous.getPath() + '->' + self.label;
	}
	return self.label;
}